Моя система частиц это просто массив частиц, содержащих скорости и положения, которые интегрируются на каждом шаге. Для отображения используются точки (класс Points), но также можно использовать спрайты, треугольники или трёхмерные модели. Это несущественно. Все параметры отображения и физики можно легко сохранить в json. Затем их легко прочесть и создать новую систему. Отображаемый объект встраивается в граф сцены и рисуется средствами библиотеки, как обычный оъект.

Однако проблемы вознникают, когда я хочу интегрировать эту систему с библиотекой и её системой записи сцены. Дело в том, что рисуемый объект Points тоже хочет записаться в файл json, а также записать в него свои материал и геометрию. Что нежелательно. 

Так проиисходит потому, что записью в JSON занимается один метод из базового объекта Object3D. Он записывает не только трансформации и своё положение в графе сцены, но также анимации, геометрию и материалы. Это ужасно. Это плохой дизайн. Базовый объект не должен знать о таких вещах, которые были созданы после него. 

Чтобы обойти это я создал Particles_Points, который записывает только своё местоположение в графе сцене и трансформации. Системы части записываются отдельно. Затем, когда я их прочитываю, специальная функция обходит граф сцены, убирает из него пустышки Particles_Points и заменяет их настоящими объектами, принадлежащеми системам частиц. Ужасный хак. 

Ещё сложнее было впихнуть анимации. Мне понадобились простенькие анимации, вроде вращения вокруг оси Икс, которые делаются простейшими функциями. Главное, чтобы такая анимация присоединялась бы к узлу графа сцены и воздействовала на его состояние. 

Специальная функция обходит граф сцены, собирает все такие объекты-анимации в одну библиотеку. Также она собирает данные о привязках. Поскольку каждый объект графа сцены теперь имеет ссылку на анимацию, то это надо записать. Моя функция записывает объект из двух составляющих uuid узла сцены и массив uuid объектов анимации. Во время чтения надо всего лишь пройтись по второму массиву и добавить перечисленные там объекты в узел сцены. 

Создание узлов сцены делается также как создание излучателей и влиятелей системы частиц. Я регистрирую фабрики этих классов (по сути просто конструкторы). Когда объект, читающий json встречает type, равный имени класса, он просто берёт из глобального массива фабрику (конструктор), создаёт нужный объект и передаёт ему параметры. 


class registration 
Register_Class("My_Class", My_Class_Constructor)

...

class reading
var constructor = Get_Class(json.type);
if (constructor) {
    var obj = new constructor ()
    obj.parse(json);
}

