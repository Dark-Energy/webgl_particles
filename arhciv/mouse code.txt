    my_app.create_line = function (a, b)
    {
       
        var points = new Float32Array([ a.x, a.y, a.z, a.x+b.x, a.y+b.y, a.z+b.z]); 
        //console.log("points ", points);
        var vertices = new THREE.BufferAttribute(points, 3).setDynamic(true);        
        var geom = new THREE.BufferGeometry(); 	
        geom.addAttribute('position', vertices);
        
        var line = new THREE.Line(geom, new THREE.LineBasicMaterial);
        this.main_scene.add(line);
     }

     
     
    my_app.find_vector_scene_intersections = function(vector)
    {
        vector.unproject(this.main_camera);
        var ray = new THREE.Raycaster( this.main_camera.position, vector.sub( this.main_camera.position ).normalize() );
            // create an array containing all objects in the scene with which the ray intersects
			//var intersects = ray.intersectObjects( [grid_text.root], true ); 
			//console.log(fake_plane.root.children[0].geometry);
			var intersects = ray.intersectObjects( [this.main_scene], true ); 
			console.log(intersects);
	}
  
     
    my_app.create_mouse_listener = function ()
    {
    
        var self = this;
        document.addEventListener("click", function (event) {
            var vector = Engine.Mouse_Intersector.mouse_coords_to_vector(self.dom_screen, event);
            //var intersects = ray.intersectObjects( [self.main_scene], true ); 
            self.find_vector_scene_intersections(vector);
        });
        /*
        var onMouseDownPosition = {};
        this.dom_screen.addEventListener("mousedown", function (event) {
            self.mouseDown = true;
            onMouseDownPosition.x = event.clientX;
            onMouseDownPosition.y = event.clientY;
            
        });
        
       this.dom_screen.addEventListener("mouseup", function (event) {
            self.mouseDown = false;
        });

          this.dom_screen.addEventListener("mousemove", function (event) {
             if ( self.mouseDown ) {
                theta = - ( ( event.clientX - onMouseDownPosition.x ) * 0.5 )
                        + onMouseDownTheta;
                phi = ( ( event.clientY - onMouseDownPosition.y ) * 0.5 )
                      + onMouseDownPhi;

                phi = Math.min( 180, Math.max( 0, phi ) );

                var camera = self.main_camera;
                camera.position.x = radious * Math.sin( theta * Math.PI / 360 )
                                    * Math.cos( phi * Math.PI / 360 );
                camera.position.y = radious * Math.sin( phi * Math.PI / 360 );
                camera.position.z = radious * Math.cos( theta * Math.PI / 360 )
                                    * Math.cos( phi * Math.PI / 360 );
                camera.updateMatrix();
            }
        });
        */
    }
