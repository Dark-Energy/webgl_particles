
	var my_app = {};
    
    
    my_app.find_intersected_object = function (ray)
    {
        var collider = new Engine.Simple_Collider(this.main_scene);
        var ints = collider.check_ray(ray);
        //console.log("collider ", ints);
        return ints;
    }

   
    my_app.dragging = false;

    my_app.find_picked_object = function (ray)
    {
        var ints = Engine.Mouse_Intersector.find_intersected_object(this.main_scene, ray);
        //console.log("picked obbjects ", ints);
        return ints;
    }

    my_app.get_ray = function (event)
    {
        var mc = new Engine.Mouse_Camera_Controller(this.canvas, this.main_camera);
        var ray = mc.get_ray_from_camera_in_mouse_position(event);
        return ray;
    }

   function get_dist(a, b)
   {
        var vec = new THREE.Vector3()
        vec.copy(a).sub(b);
        return vec.length();
   }
    
    //mixin for camera
    function get_forward_plan_by_object(obj)
    {
        var z = new THREE.Vector3();
        z.setFromMatrixColumn( this.matrixWorld, 2 );
        var dist = obj.position.dot(z);             
        var plane= new THREE.Plane(z.negate(), dist);
        return plane;
    }
    
    my_app.test_basis_extract = function ()
    {
        //this.main_camera.lookAt(new THREE.Vector3(0, 0, -1));
        //console.log("test axis extract");
        var x = new THREE.Vector3();
        var y = new  THREE.Vector3();
        var z = new  THREE.Vector3();
        this.main_camera.matrixWorld.extractBasis(x,y,z);
        //console.log(x,y,z);

        var m = new THREE.Matrix4();
        m.getInverse(this.main_camera.matrixWorld);
        m.extractBasis(x,y,z);
        //console.log(x,y,z);
        //console.log("end");

        var z1 = new THREE.Vector3(0, 0,1);
        z1.applyMatrix4_rotation(this.main_camera.matrixWorld);
        //console.log("z axis after rotation", z1);
        return z;
    }
    
    
    my_app.test_plane_dist = function (z, obj)
    {
        var dist = obj.position.dot(z);     
        //console.log("dist to camera along normal ", dist);

        var plane= new THREE.Plane(z.clone().negate(), dist);        
        //console.log("from normal and dist get plane", plane);
        //console.log("dist from obj position to plane", plane.normal.dot(obj.position)+dist);
        return plane;
    }
    
    my_app.test_point_at_plane = function(ray, plane, obj)
    {

        var at = new THREE.Vector3();
        ray.intersectPlane(plane, at);
        //console.log("intersection point at plane", at)
        //console.log("obj position", obj.position); 
        //console.log("is both point on plane?", plane.normal.dot(at) - plane.normal.dot(obj.position));
        return at;
    }
    
    my_app.test_offset = function (at, obj)
    {
        var offset = at.clone().sub(obj.position);
        //console.log("distance betweeen", offset);
        //console.log("distance length", offset.length());
        return offset;
    }
        
    my_app.test_plane = function (obj, event)
    {
        var z = this.test_basis_extract();
        var plane = this.test_plane_dist(z, obj);
        var ray = this.get_ray(event);
        
        var at = this.test_point_at_plane(ray, plane, obj);

        //console.log("distance along normal from at", plane.normal.dot(at), dist);
  
        
        //console.log("dist to camera along ray from she", get_dist(this.main_camera.position, at));
        //console.log("dist to camera from obj", get_dist(this.main_camera.position, obj.position));
        //console.log("dist from obj to at", get_dist(obj.position,at));
        
        var offset = this.test_offset(at, obj);
        
        //console.log("is point on plane?", plane.normal.dot(obj.position.clone().add(offset)) + plane.constant);
        
        //this.create_target_position(at);
        //console.log("pos, at", obj.position,at);   
        obj.position.copy(at);
        
        //console.log("ray intersect point ", at, "position sphere ", obj.position);
        //console.log("distance to plane ", dist);
        var vec2 = new THREE.Vector3();
        vec2.copy(obj.position);
        var dist2 = vec2.sub(this.main_camera.position).length();
        //console.log("len3", dist2);
        
        //console.log("at", at.length());

        //console.log("END");
        return at;
    }

    
    function Dragger()
    {
        this.dragging = false;
    }
    
    _.copy_object(Dragger.prototype, {
        constructor: Dragger,
        end_drag: function () 
        {
        },
        });
    
    my_app.remove_target = function (object)
    {
        if (object.name === "target") {
            object.parent.remove(object);
        }
    }
    
    
    my_app.add_event_listener = function ()
    {
        var self = this;
        
        self.old_pos = new THREE.Vector3();
        
        function mouseup(event)
        {
            if (self.dragging) {
                end_drag();
                return;
            }
            var ray = self.get_ray(event);        
            if (event.button === 0) {
                self.create_target(ray.direction);
            } else if (event.button === 1) {
                var intersects = self.find_intersected_object(ray);
                if (intersects) {
                    self.remove_target(intersects[0]);
                }            
            }
        }

       
        function start_drag(event, object) 
        {
            self.old_pos.copy(object.position);
            self.dragging = true; 
            self.drag_object = object;
            //console.log(self.main_camera.matrixWorld);
            //var m = new THREE.Matrix4();
            //m.getInverse(self.main_camera.matrixWorld);
            //console.log(m);
            self.canvas.addEventListener("mousemove", drag);
        }
        
        
       
        function drag(event)
        {
            self.test_plane(self.drag_object, event);
        }
        
        function end_drag()
        {
           self.dragging = false;
           self.canvas.removeEventListener("mousemove", drag);
        }
        
        function mousedown(event) 
        {
            var ray = self.get_ray(event);                
            if (!self.dragging) {
                console.log("dragging is false, check intersection");
                var intersects = self.find_intersected_object(ray);
                //start dragging
                if (intersects[0]) {
                    start_drag(ray, intersects[0]);
                }
            }
        }
        
        this.canvas.addEventListener("mouseup", mouseup, false);
        this.canvas.addEventListener("mousedown", mousedown, false);
    }
    
   
   my_app.color_box =  new Engine.Table_Color();
   
   my_app.create_target_position = function (pos)
   {
        var sg = new THREE.SphereGeometry(1, 10, 10);
        sg.computeVertexNormals();
        var sm = new THREE.MeshPhongMaterial();
        sm.color.copy( this.color_box.get() );
        sm.shininess = 50;
		var sphere = new THREE.Mesh(sg, sm);
		sphere.name = "target";
		sphere.position.copy(pos);
		this.main_scene.add(sphere);
   }
   
   my_app.create_target = function (dir)
   {
        var distance = 20;
        var pos = this.main_camera.position.clone().add( dir.multiplyScalar( distance ) );
        var vector = pos;   
        this.create_target_position(pos);
    }


    
    my_app.create_scene = function ()
    {
        this.add_event_listener();
        this.main_camera = new THREE.PerspectiveCamera(50, 800/600, 0.1, 1000);
        this.main_camera.position.set(0, 0, 10);  
        //this.main_camera.lookAt(new THREE.Vector3(0, 1, 0));
        
		var pointLight = new THREE.PointLight(0xFFFFFF, 1.5, 200, 2);
		pointLight.position.set(2, 0, 20);
		this.main_scene.add(pointLight);
        //this.main_camera.updateProjectionMatrix();
        this.main_camera.updateMatrixWorld(true);
        
       

    }
    
    my_app.created = function () 
    {
        var self = this;
        this.create_scene();    
        this.loop();        
    }

    my_app.update = function (dt)
    {
        Engine.Application.prototype.update.call(this, dt);
        this.main_scene.update(dt);
    }
    
	
	var Particles_Demo = Engine.Application.extend(my_app);
    var app = new Particles_Demo();
    
    app.start();
    

    
    
    