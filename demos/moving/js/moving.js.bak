
	var my_app = {};
    
    
    my_app.find_intersected_object = function (ray)
    {
        var collider = new Engine.Simple_Collider(this.main_scene);
        var ints = collider.check_ray(ray);
        console.log("collider ", ints);
        return ints;
    }

   
    my_app.dragging = false;

    my_app.find_picked_object = function (ray)
    {
        var ints = Engine.Mouse_Intersector.find_intersected_object(this.main_scene, ray);
        console.log("picked obbjects ", ints);
        return ints;
    }

    my_app.get_ray = function (event)
    {
        var mc = new Engine.Mouse_Camera_Controller(this.canvas, this.main_camera);
        var ray = mc.get_ray_from_camera_in_mouse_position(event);
        return ray;
    }
    
    
    my_app.test_plane = function (obj)
    {
        console.log("TEST PLANE");    
        var x = new THREE.Vector3();
        var y = new  THREE.Vector3();
        var z = new  THREE.Vector3();
        this.main_camera.matrixWorld.extractBasis(x,y,z);
        var dist = obj.position.dot(z); 
        console.log("distance to plane ", dist);
        var plane= new THREE.Plane(z.negate(), dist);
        var dist2 = z.dot(obj.position);
        console.log("distance to plane after negate", dist2);
        var ray = new THREE.Ray(this.main_camera.position, this.direction_to_mouse);
        console.log("distance to plane", ray.distanceToPlane(plane));
        var target = new THREE.Vector3();
        var at = ray.intersectPlane(plane, target);
        console.log("ray intersect point ", at, "position sphere ", obj.position);
        console.log("at",at);
        console.log("END");
        return at;
    }

    
    function Dragger()
    {
        this.dragging = false;
    }
    
    _.copy_object(Dragger.prototype, {
        constructor: Dragger,
        end_drag: function () 
        {
        },
        });
    
    my_app.remove_target = function (object)
    {
        if (object.name === "target") {
            object.parent.remove(object);
        }
    }
    
    
    my_app.add_event_listener = function ()
    {
        var self = this;
        
        function mouseup(event)
        {
            if (self.dragging) {
                end_drag();
                return;
            }
            var ray = self.get_ray(event);        
            if (event.button === 0) {
                self.create_target(ray.direction);
            } else if (event.button === 1) {
                var intersects = self.find_intersected_object(ray);
                if (intersects) {
                    self.remove_target(intersects[0]);
                }            
            }
        }

        var oldx, oldy;
        var newx, newy;
        
        var old_pos = new THREE.Vector3();
        function start_drag(event, object) 
        {
            old_pos.copy(object.position);
            self.dragging = true; 
            self.drag_object = object;
            var at = self.test_plane(object);
            console.log(at, object.position);
            //self.canvas.addEventListener("mousemove", drag);
        }
        
        
        	
        function get_unproject_velocity(a, b, camera)
        {
            var r1 = new THREE.Vector3();
            r1 = a.clone();
            var r2 = new THREE.Vector3();
            r2 = b.clone();
            r1.z = 0;
            r2.z = 0;
            r1.unproject(camera);
            r2.unproject(camera);
            r2.sub(r1);
            return r2.length();
        }
        
        function get_normal(v)
        {
            var n = new THREE.Vector3();
            n.copy(v).normalize();
            return n;
        }
        
        function drag(event)
        {
            newx = event.clientX;
            newy = event.clientY;
            
            var a = Engine.Mouse_Intersector.get_normalized_screen_coords(self.canvas, oldx, oldy);
            var b = Engine.Mouse_Intersector.get_normalized_screen_coords(self.canvas, newx, newy);

            var x = b.x - a.x;
            var y = b.y - a.y;
            var len = Math.sqrt(x*x + y*y);
            
            //unproject and transform to world space vectors
            a  = Engine.Mouse_Intersector.unproject(a, self.main_camera);
            b  = Engine.Mouse_Intersector.unproject(b, self.main_camera);
            console.log("positions a, drag object", a, self.drag_object.position);
            console.log("positions a, drag object", get_normal(a), get_normal(self.drag_object.position));
            
            //vector = (b-a).normalize();
            var vector = new THREE.Vector3();
            vector.copy(b).sub(a).normalize().multiplyScalar(len);
            
            //self.drag_object.position.y += vector.y;
            //self.drag_object.position.x += vector.x;
            //console.log("world velocity vector ", vector, "length", vector.length());
            
            //console.log(self.drag_object.position, b);
            self.drag_object.position.y = b.y;
            self.drag_object.position.x = b.x;
            
            
            oldx = newx;
            oldy = newy;
        }
        
        function end_drag()
        {
           self.dragging = false;
           //self.canvas.removeEventListener("mousemove", drag);
        }
        
        function mousedown(event) 
        {
            var ray = self.get_ray(event);                
            if (!self.dragging) {
                console.log("dragging is false, check intersection");
                var intersects = self.find_intersected_object(ray);
                //start dragging
                if (intersects[0]) {
                    start_drag(event, intersects[0]);
                }
            }
        }
        
        this.canvas.addEventListener("mouseup", mouseup, false);
        this.canvas.addEventListener("mousedown", mousedown, false);
    }
    
   
   my_app.color_box =  new Engine.Table_Color();
   
   my_app.create_target = function (dir)
   {
          
        var distance = 20;
        var pos = this.main_camera.position.clone().add( dir.multiplyScalar( distance ) );

        var vector = pos;   
        
        var sg = new THREE.SphereGeometry(1, 10, 10);
        sg.computeVertexNormals();
        var sm = new THREE.MeshPhongMaterial();
        sm.color.copy( this.color_box.get() );
        sm.shininess = 50;
		var sphere = new THREE.Mesh(sg, sm);
		sphere.name = "target";
		sphere.position.copy(vector);
		this.main_scene.add(sphere);
    }


       my_app.shit = function () {
            var m = new THREE.Matrix4();
            m.getInverse(this.main_camera.matrixWorld);
            var axis1 = new THREE.Vector3();
            var axis2 = new THREE.Vector3(); 
            var axis3 = new THREE.Vector3();
            m.extractBasis(axis1, axis2, axis3);
            //console.log("camera view matrix basis ", axis3);
            this.main_camera.updateMatrixWorld(true);
            //console.log("camera matrix ", this.main_camera.matrixWorld);
            axis3.normalize();
            //console.log("dot ", this.drag_object.position.dot(axis3));
            //this.main_camera.matrixWorld.extractBasis(axis1, axis2, axis3);            
            //console.log("camera world matrix basis ", axis3, axis2, axis1);        
       }

    
    my_app.create_scene = function ()
    {
        this.add_event_listener();
        this.main_camera = new THREE.PerspectiveCamera(50, 800/600, 0.1, 1000);
        this.main_camera.position.set(0, 0, 10);  
        this.main_camera.lookAt(new THREE.Vector3(-10, 0, 0));
        
		var pointLight = new THREE.PointLight(0xFFFFFF, 1.5, 200, 2);
		pointLight.position.set(2, 0, 20);
		this.main_scene.add(pointLight);
        //this.main_camera.updateProjectionMatrix();
        this.main_camera.updateMatrixWorld(true);
        
       

    }
    
    my_app.created = function () 
    {
        var self = this;
        this.create_scene();    
        this.loop();        
    }

    my_app.update = function (dt)
    {
        Engine.Application.prototype.update.call(this, dt);
        this.main_scene.update(dt);
    }
    
	
	var Particles_Demo = Engine.Application.extend(my_app);
    var app = new Particles_Demo();
    
    app.start();
    

    
    
    